import Clases.material.*
import Clases.companiero.*
import Clases.experimento.*

describe "Tests de Proyecto" {
	
	var morty = new Morty(3)
	var lata = new Lata(10)
	var lata250metal = new Lata(2500)
	var lata200metal = new Lata(2000)
	var cable = new Cable(1000, 10)
	var lataCableada = #{lata, cable}
	var fleeb = new Fleeb(lataCableada,10)
	var materiaOscura = new MateriaOscura(cable)
	var altaLata = new Lata(500)
	var viejoFleeb = new Fleeb(lataCableada, 20)
	var bateria = new Bateria(#{cable, viejoFleeb})
	var bateriaOP = new Bateria(#{cable, viejoFleeb, altaLata, bateria})
	var circuito = new Circuito(#{cable})
	
	

	fixture{
		morty.setEnergia(1000)
		morty.recolectar(cable)
		morty.recolectar(lata)
		morty.recolectar(materiaOscura)
		
		rick.companiero(morty)
		
		summer.setEnergia(1000)
		summer.recolectar(cable)
		summer.recolectar(lata)
		
		jerry.setEnergia(1000)
		jerry.recolectar(cable)
		jerry.recolectar(lata)
		jerry.recolectar(materiaOscura)
		
		estrategia.estrategiaElegida(menorCantidadDeMetal)
		
	}

	test "Test de Lata" {

		assert.notThat(lata.esRadioactivo())
		assert.equals(10, lata.gramosDeMetal())
		assert.equals(1, lata.electricidadQueConduce())
		assert.equals(0, lata.energiaQueGenera())

	}
	
	test "Test de Cable"{
		assert.notThat(cable.esRadioactivo())
		assert.equals(10, cable.gramosDeMetal())
		assert.equals(30, cable.electricidadQueConduce())
		assert.equals(0, cable.energiaQueGenera())
	}
	
	test "Test de Fleeb"{
		assert.notThat(fleeb.esRadioactivo())
		assert.equals(20, fleeb.gramosDeMetal())
		assert.equals(1, fleeb.electricidadQueConduce())
		assert.equals(0, fleeb.energiaQueGenera())
	}
	
	test "Test de Materia Oscura"{
		assert.notThat(materiaOscura.esRadioactivo())
		assert.equals(10, materiaOscura.gramosDeMetal())
		assert.equals(15, materiaOscura.electricidadQueConduce())
		assert.equals(0, materiaOscura.energiaQueGenera())
	}
	
	test "Test de Bateria"{
		assert.that(bateria.esRadioactivo())
		assert.equals(30, bateria.gramosDeMetal())
		assert.equals(0, bateria.electricidadQueConduce())
		assert.equals(60, bateria.energiaQueGenera())
	}
	
	test "Test de Circuito"{
		assert.notThat(circuito.esRadioactivo())
		assert.equals(10, circuito.gramosDeMetal())
		assert.equals(90, circuito.electricidadQueConduce())
		assert.equals(0, circuito.energiaQueGenera())
	}
	
	test "Test de Morty"{
		assert.notThat(morty.puedeRecolectar(lata))
		assert.equals(970, morty.energia())
		morty.darObjetos(rick)
		assert.that(morty.mochila().isEmpty())
	}
	
	test "Test de Rick"{
		morty.mochila().removeAll(morty.mochila())
		morty.recolectar(altaLata)
		morty.recolectar(viejoFleeb)
		morty.darObjetos(rick)
		assert.that(rick.puedeRealizarExperimento(construirUnaBateria))
		assert.that(rick.puedeRealizarExperimento(construirUnCircuito))
		rick.realizar(construirUnaBateria)
		assert.equals(1,rick.cantidadDeObjetos())
		morty.recolectar(viejoFleeb)
		morty.darObjetos(rick)
		assert.that(rick.puedeRealizarExperimento(construirUnShockElectrico))
		morty.setEnergia(1000)
		rick.realizar(construirUnShockElectrico)
		assert.equals(2040, morty.energia())
		assert.that(rick.mochila().isEmpty())
	
	}
	
	//Tests de Summer
	
	test "Test de Summer"{
		rick.companiero(summer)
		assert.notThat(summer.puedeRecolectar(lata))
		assert.equals(984, summer.energia())
		summer.darObjetos(rick)
		assert.that(summer.mochila().isEmpty())
		assert.equals(974, summer.energia())
		
	}
	
	//Tests de jerry
	test "test b√°sico de Jerry"{
		rick.companiero(jerry)
		assert.notThat(jerry.puedeRecolectar(lata))
		assert.equals(970, jerry.energia())
		//console.println(jerry.cantidadDeObjetos())
		//console.println(jerry.capacidadMochila())
		jerry.darObjetos(rick)
		assert.that(jerry.mochila().isEmpty())
		//console.println(jerry.estaDeBuenHumor())
	}

	test "test comportamiento de Jerry de mal humor"{
		rick.companiero(jerry)
		jerry.darObjetos(rick)
		assert.notThat(jerry.estaDeBuenHumor())
		jerry.recolectar(lata)
		assert.notThat(jerry.puedeRecolectar(cable))
		jerry.darObjetos(rick)
		jerry.recolectar(fleeb)
		assert.that(jerry.estaDeBuenHumor())
	}
	
	test "comportamiento Jerry sobreexcitado"{
		rick.companiero(jerry)
		jerry.darObjetos(rick)
		jerry.recolectar(viejoFleeb)
		assert.that(jerry.estaSobreExcitado())
		assert.equals(6, jerry.capacidadMochila())
	}
	
	test "estrategia menos cantidad de  metal"{
		estrategia.estrategiaElegida(menorCantidadDeMetal)
		morty.mochila().removeAll(morty.mochila())
		morty.setEnergia(2000000)
		morty.recolectar(bateria)
		morty.recolectar(bateriaOP)
		morty.darObjetos(rick)
		morty.recolectar(lata250metal)
		morty.recolectar(lata200metal)
		morty.darObjetos(rick)
		assert.that(rick.puedeRealizarExperimento(construirUnShockElectrico))
		rick.realizar(construirUnShockElectrico)
		assert.equals(#{bateriaOP, lata250metal}, rick.mochila())
	}
	
	test "estrategia mejorGeneradorElectrico"{
		estrategia.estrategiaElegida(mejorGeneradorElectrico)
		morty.mochila().removeAll(morty.mochila())
		morty.setEnergia(2000000)
		morty.recolectar(bateria)
		morty.recolectar(bateriaOP)
		morty.darObjetos(rick)
		morty.recolectar(lata250metal)
		morty.recolectar(lata200metal)
		morty.darObjetos(rick)
		assert.that(rick.puedeRealizarExperimento(construirUnShockElectrico))
		rick.realizar(construirUnShockElectrico)
		assert.equals(rick.mochila().contains(bateria))
	}
	
}	